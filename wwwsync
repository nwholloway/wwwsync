#! /usr/bin/perl
# WWWSync: Upload new modifications to your WWW pages by ftp.
# Author : Nick Holloway 
#  Email : Nick.Holloway@alfie.demon.co.uk
#    WWW : http://www.alfie.demon.co.uk/

$RCSid = '$Id: wwwsync,v 1.11 2000/08/19 13:32:22 alfie Exp alfie $';
$revision = (split / /, $RCSid )[2];
$version = <<"EOF";
WWWSync $revision (Perl $], Net::FTP $Net::FTP::VERSION)
EOF
$help = <<'EOF';
WWWSync:
    Compares the directory structure locally with that currently stored
    on the ftp server.  Any files and directories that no longer exist
    locally are removed, then any new or updated directories and files
    are created.
options:
    -H      : display this help message and exit
    -V      : display the version and exit
    -n      : just display the actions that would be taken, not perform them
    -v      : be more verbose in reporting
    -q      : operate quietly
    -P      : use passive transfers
    -f file : read settings from configuration file
    -l dir  : local directory for WWW pages
    -r dir  : remote directory for WWW pages
    -h host : ftp host to connect to (use host:port for non-standard port)
    -u user : user to login
    -p pass : password
    -R      : recurse to list each directory seperately
    -T      : calculate time difference (also allows for non-GMT timestamps)
    -C      : set file permissions on remote files
    -F      : upload file irrespective of timestamps
EOF
#    -L      : convert filenames to lower case

use Getopt::Std;
use Net::FTP;
use Time::Local;

# ---------------------------------------------------------------------------
# User Serviceable Parts.  Either edit to taste, use a config file with
# -f, or specify the individual arguments using the command line.

# ftp machine to upload to
$ftphost  = "";
$user     = "";
$password = "";

# use passive FTP connections
$passive  = 0;

# resurse to list each directory seperately
$recurse  = 0;

# calculate time difference between local and remote machine
$timewarp = 0;

# set file permissions on remote files
$chmod    = 0;

# local directory containing WWW pages
$loc_dir = "";
$rem_dir = "";

# Files to ignore on the local and remote machines respectively
@rem_ignore = ( );
@loc_ignore = ( );

# Files to upload as text (ASCII).
@text = ( '*.htm', '*.html', '*.txt', '*.map' );

# ---------------------------------------------------------------------------
# Argument handling.  The settings above can be overridden using the
# parameters specified in an external config file (-f), which can be
# in turn overridden by the particular command line arguments.

$0 =~ s%.*/%%;
$0 =~ s%\.pl$%%;

die "usage: $0 [-n] [-v] [-q] [-f config]\n"
  . "   or: $0 [-n] [-v] [-q] [-P] [-R] [-h ftphost] [-u user] [-p password]\n"
  . "                    [-l loc_dir] [-r rem_dir]\n"
  . "   or: $0 -H (to display more information)\n"
  . "   or: $0 -V (to display version)\n"
    unless getopts( 'nvqf:h:u:p:l:r:HVDPRTCF' ) && @ARGV == 0;

die $help     if $opt_H;
die $version  if $opt_V;

print "Version: $version" if $opt_D;

# ---------------------------------------------------------------------------
if ( $opt_f )
{
    die "$0: can't read config file \"$opt_f\"\n" unless -r $opt_f;
    local( @INC ) = ( '.' );
    do $opt_f;
    die "$0: error loading config file:\n$@" if $@;
}

$loc_dir  = $opt_l if $opt_l;
$rem_dir  = $opt_r if $opt_r;
$ftphost  = $opt_h if $opt_h;
$ftpport  = ( $ftphost =~ s/:(\d+)$// ) ? $1 : 21;
$user     = $opt_u if $opt_u;
$password = $opt_p if $opt_p;
$passive  = 1      if $opt_P;
$recurse  = 1      if $opt_R;
$timewarp = 1      if $opt_T;
$chmod    = 1      if $opt_C;

$| = 1 if $opt_D;

die "$0: no local directory specified for WWW pages\n"
    unless $loc_dir ne "";
die "$0: $loc_dir is not a directory\n"
    unless -d $loc_dir;
die "$0: no remote ftp host specified\n"
    if $ftphost eq "";
die "$0: must specify password as well as user name\n"
    if $user ne "" && $password eq "";
die "$0: must specify user name as well as password\n"
    if $user eq "" && $password ne "";

( $loc_ignore = &glob2re( @loc_ignore ) )
    || die "$0: invalid value in \@loc_ignore\n";

( $rem_ignore = &glob2re( @rem_ignore ) )
    || die "$0: invalid value in \@rem_ignore\n";

( $text = &glob2re( @text ) )
    || die "$0: invalid value in \@text\n";

# ---------------------------------------------------------------------------
print "Scanning local directory... \n" unless $opt_q;

@dir = ( $loc_dir );
while ( @dir )
{
    $dir = pop @dir;
    opendir( DIR, $dir ) 
	|| die "$0: can't read directory \"$dir\": $!\n";
    while ( defined( $file = readdir( DIR ) ) )
    {
	next if $file =~ /^\.\.?$/;		# Skip "." and ".."

	$path = substr( $dir, length( $loc_dir )  ) . "/$file";

	if ( -d "$dir/$file" )
	{
	    next if "$path/" =~ m/$loc_ignore/o;
	    next if "$path/" =~ m/$rem_ignore/o;

	    push( @dir, "$dir/$file" );

	    $path =~ tr/A-Z/a-z/ if $opt_L;
	    push( @loc_path, $path );
	    $loc_type{ $path } = "d";
	    print "--- -- --:-- $path\n" if $opt_v;
	}
	elsif ( -f _ )
	{
	    next if $path =~ m/$loc_ignore/o;
	    next if $path =~ m/$rem_ignore/o;

	    push( @loc_path, $path );
	    $loc_type{ $path } = "f";
	    $loc_time{ $path } = ( stat( _ ) )[9];
	    $loc_mode{ $path } = sprintf "0%03o", ( ( stat( _ ) )[2] & 0777 );
	    # TODO: map path to permission (mainly for Win32)
	    print &time2ls( $loc_time{ $path } ), " $path",
			    ( $chmod ? " $loc_mode{$path}" : "" ), "\n"
		if $opt_v;
	}
	else
	{
	    warn "ignoring \"$path\": not a file or directory\n";
	}
    }
    closedir DIR;
}

# ---------------------------------------------------------------------------
print "Connecting to ftp server... \n" unless $opt_q;

$ftp = Net::FTP->new( $ftphost, Port => $ftpport, Debug => $opt_D, Passive => $passive );

die "$0: $ftphost ($ftpport): unable to connect\n"
    unless defined( $ftp );

if ( $user ne "" )
{
    $ftp->login( $user, $password )
	|| &ftp_error( undef, "login failed", $ftp );
}
else
{
    $ftp->login()
	|| &ftp_error( undef, "login failed", $ftp );
}

$ftp->cwd( $rem_dir )
    || &ftp_error( $rem_dir, "unable to change directory", $ftp )
	if $rem_dir ne "";

( $base = $ftp->pwd() )
    || &ftp_error( $rem_dir, "can't find current directory", $ftp );

$base = "" if $base eq "/";

# Are we talking to a win32 server (with case insensitive filesystem)
$win32 = $ftp->quot( "syst" ) && $ftp->message() =~ /Windows/;

# ---------------------------------------------------------------------------
print "Scanning remote directory... \n" unless $opt_q;

if ( $timewarp )
{
    $timewarp = time;
    $tstamp = $ftp->put_unique( "/dev/null", "tstamp" );
    if ( $tstamp )
    {
	$tstamp = "/$tstamp";
    }
    else
    {
	# Pick a name that shouldn't clash
	for ( '.' , '$', '_', '%', '~', '42' )
	{
	    $path = "/${_}tstamp";
	    if ( $path !~ m/$rem_ignore/o && ! $loc_type{ $path } )
	    {
		$tstamp = $path;
		$ftp->put( "/dev/null", $base.$tstamp )
		    || &ftp_error( $path, "unable to create timestamp file", $ftp );
		last;
	    }
	}
	if ( ! $tstamp )
	{
	    die "$0: unable to create unique timestamp file\n";
	}
    }
}

@dirs = ( "" );
while ( @dirs ) 
{
    $dir = pop @dirs;

    # Change to subdirectory (required if recursing each directory)
    $ftp->cwd( "$base$dir" )
	|| &ftp_error( $dir, "unable to change directory", $ftp )
	    if $dir ne "";

    @list = $recurse ? $ftp->dir( '-la' ) : $ftp->ls( '-lRa' );

    if ( @list == 0 && $ftp->status != Net::FTP::CMD_OK )
    {
	die "Please Report!!!: nothing for directory listing\n",
	    "FTP message: ", &nonl( $ftp->message ), "\n";
    }

    for $_ ( @list )
    {
	chomp;
	print STDERR "<<< $_\n" if $opt_D;
	if ( /^-([r-][w-][sStTx-]){3}\s+/ )
	{
	    @x = split( ' ', $_, 9 );

	    $path = "$dir/$x[8]";

	    next if $path =~ m/$rem_ignore/o;

	    push( @rem_path, $path )
		unless $timewarp && $path eq $tstamp;
	    $rem_time{ $path } = &ls2time( $x[5], $x[6], $x[7] );
	    $rem_mode{ $path } = &ls2mode( $x[0] );
	    $rem_type{ $path } = "f";

	    print &time2ls( $rem_time{ $path } ), " $path",
			    ( $chmod ? " $rem_mode{$path}" : "" ), "\n"
		if $opt_v;
	}
	elsif ( /^d([r-][w-][sStTx-]){3}\s+/ )
	{
	    @x = split( ' ', $_, 9 );

	    next if $x[8] =~ /^\.\.?$/;

	    $subdir = "$dir/$x[8]";

	    if ( "$subdir/" !~ m/$rem_ignore/o )
	    {
		push( @rem_path, $subdir );
		$rem_type{ $subdir } = "d";
		print "--- -- --:-- $subdir\n" if $opt_v;

		push( @dirs, $subdir ) if $recurse;
	    }
	}
	elsif ( /^$/ || /^total \d+$/ )
	{
	    next;
	}
	elsif ( /^[cblps]([r-][w-][sStTx-]){3}\s+/ )
	{
	    @x = split( ' ', $_, 9 );
	    $path = "$dir/$x[8]";

	    print "Ignoring $x[8]\n" if $opt_v;
	    if ( ! defined( $loc_type{ $path } ) )
	    {
		warn "ignoring \"$path\": not a file or directory\n";
	    }
	    else
	    {
		die "$0: \"$path\": exists locally,"
			    . " and is not a file or directory remotely\n";
	    }
	}
	elsif ( /^(.*):$/ )
	{
	    warn "Please Report!!!:\n*** Bogus: $_" if $recurse;

	    $dir = "/$1";
	    $dir =~ s|^/\./|/|;	# some FTP daemons report "./directory:"

	    if ( $dir eq "/." )	# some FTP daemons start listing with ".:"
	    {
		$dir = "";
		next;
	    }

	    next;

	    if ( "$dir/" !~ m/$rem_ignore/o )
	    {
		push( @rem_path, $dir );
		$rem_type{ $dir } = "d";
		print "--- -- --:-- $dir\n" if $opt_v;
	    }
	}
	else
	{
	    if ( ! $recurse && @rem_path == 0 )
	    {
		die "$0: try using '-R' flag or setting '$recurse = 1'\n";
	    }
	    warn "Please Report!!!:\n*** Bogus: $_";
	}
    }
}

if ( $timewarp )
{
    $ftp->delete( $base.$tstamp )
	|| &ftp_error( $tstamp, "delete failed", $ftp );
    print "Local : ", &time2ls( $timewarp ), "\n" if $opt_D;
    print "Remote: ", &time2ls( $rem_time{ $tstamp } ), "\n" if $opt_D;
    $timewarp = $rem_time{ $tstamp } - $timewarp;
    $timewarp -= $timewarp % 60;
    print "Time difference is ", $timewarp, " seconds\n" if $opt_v;
}

# ---------------------------------------------------------------------------
print "Updating remote directory...\n" unless $opt_q;

# Scan remote list, deleting files and directories that should no longer exist

# Scan local list, making directories that are don't exist on the ftp
# server, and uploading files that are either new or changed.

if ( &pathclash )
{
    &delete;
    &upload;
}
else
{
    &upload_new;
    &upload_modified;
    &delete;
}

# ---------------------------------------------------------------------------
print "Done.\n" unless $opt_q;

$ftp->quit()
    || warn "$0: quit returned: \"", &nonl( $ftp->message ), "\"\n";

# ---------------------------------------------------------------------------

#   Returns true if a path on the server clashes with a path to be
# uploaded.  This can either be because a path has changed from a
# directory to a file (or back), or if the case of a path has changed
# and we are uploading to a case-insensitive filesystem.
sub pathclash
{
    local( $lpath, $rpath );
    local( %lower );

    for $rpath ( @rem_path )
    {
	if ( $loc_type{ $rpath } ne "" 
	    && $rem_type{ $rpath } ne $loc_type{ $rpath } )
	{
	    return 1;
	}
    }

    if ( $win32 )
    {
	for $lpath ( @loc_path )
	{
	    $rpath = $lower{ "\L$lpath" };
	    die "$0: $lpath & $rpath: clash on case-insensitive filesystem\n"
		if $rpath ne "";
	    $lower{ "\L$lpath" } = $lpath;
	}

	for $rpath ( @rem_path )
	{
	    $lpath = $lower{ "\L$rpath" };
	    if ( $lpath ne "" && $lpath ne $rpath )
	    {
		print "Case changed: $rpath => $lpath\n";
		return 1;
	    }
	}
    }

    return 0;
}

#   Return a temporary name to upload the file as.
# FIXME: need to allow for case insensitive filesystem
sub tempnam
{
    local( $path ) = @_;

    $path .= "-in";
    return $path if $rem_type{ $path } eq "" && $loc_type{ $path } eq "";

    $path .= "0";
    while ( $rem_type{ $path } ne "" || $loc_type{ $path } ne "" )
    {
	$path++;
    }

    return $path;
}

#   Delete all paths on the remote server that should no longer be there
sub delete
{
    &do_delete;
}

#   Upload to the server all new and modified paths.
sub upload
{
    &upload_new;
    &upload_modified;
}

#   Upload to the server all new paths.
sub upload_new
{
    &do_upload( 0 );
}

#   Upload to the server all modified paths.
sub upload_modified
{
    &do_upload( 1 );
}

#   Function to actually perform the deletes.
sub do_delete
{
    for $path ( reverse sort @rem_path )
    {
	if ( $rem_type{ $path } ne $loc_type{ $path } )
	{
	    if ( $rem_type{ $path } eq "d" )
	    {
		print "rmdir  $path\n" unless $opt_q;
		$ftp->rmdir( $base.$path ) || $ftp->status == Net::FTP::CMD_OK
		    || &ftp_error( $path, "rmdir failed", $ftp )
			unless $opt_n;
	    }
	    else
	    {
		print "delete $path\n" unless $opt_q;
		$ftp->delete( $base.$path )
		    || &ftp_error( $path, "delete failed", $ftp )
			unless $opt_n;
	    }
	}
    }
}

#   Function to actually perform the uploads.  Pass 0: All new paths
# Pass 1: All modified paths
sub do_upload
{
    local($pass) = @_;

    for $path ( sort @loc_path )
    {
	if ( $pass == 0 )
	{
	    # Pass 0: Upload new files/directories
	    next if $rem_type{ $path } eq $loc_type{ $path };
	}
	else
	{
	    # Pass 1: Upload modified files/directories
	    next if $rem_type{ $path } ne $loc_type{ $path };
	}

	# print "Pass $pass: $path $loc_type{ $path } $rem_type{ $path }\n";

	if ( $loc_type{ $path } eq "d" )
	{
	    if ( $rem_type{ $path } ne "d" )
	    {
		print "mkdir  $path\n" unless $opt_q;
		$ftp->mkdir( $base.$path )
		    # Ignore error for now, as only more recent versions of
		    # Net::FTP deal with servers that fail to follow RFC959.
		    # || &ftp_error( $path, "mkdir failed", $ftp )
			unless $opt_n;
	    }
	}
	else
	{
	    if ( $loc_time{ $path } + $timewarp > $rem_time{ $path } || $opt_F )
	    {
		print "upload $path\n" unless $opt_q;
		if ( $path =~ m/$text/o )
		{
		    $ftp->ascii()
			|| &ftp_error( $path, "mode ascii", $ftp )
			    unless $opt_n;
		}
		else
		{
		    $ftp->binary()
			|| &ftp_error( $path, "mode binary", $ftp )
			    unless $opt_n;
		}
		$temp = &tempnam( $path );
		$ftp->put( $loc_dir.$path, $base.$temp )
		    || &ftp_error( $path, "put failed", $ftp )
			unless $opt_n;
		$ftp->delete( $base.$path )
		    || &ftp_error( $path, "delete failed", $ftp )
			unless $rem_type{ $path } ne "f" || ! $win32 || $opt_n;
		$ftp->rename( $base.$temp, $base.$path ) 
		    || &ftp_error( $path, "rename failed", $ftp )
			unless $opt_n;
	    }
	    else
	    {
		print "leave  $path\n" if $opt_v;
	    }
	    if ( $chmod )
	    {
		if ( $loc_time{ $path } + $timewarp > $rem_time{ $path }
		    || $loc_mode{ $path } ne $rem_mode{ $path } )
		{
		    print "chmod $loc_mode{ $path } $path\n" unless $opt_q;
		    $ftp->site( "CHMOD", $loc_mode{ $path }, $base.$path ) 
			|| &ftp_error( $path, "chmod failed", $ftp )
			    unless $opt_n;
		}
	    }
	}
    }
}

# Print out error message after failure with the FTP server, and die.
sub ftp_error
{
    local( $path, $message, $ftp ) = @_;

    die "$0: $path: $message: \"", &nonl( $ftp->message ), "\"\n"
}

#   Given the fields from the output of 'ls -l', either of the form of
# "Jul 31 12:32" or "Jul 31 1996", return the time as the number of
# seconds since the epoch.  Times are in GMT.
#   If the time is given "12:32", then the nearest year for the month is
# chosen.  If a year is given, then the time is assumed to be "23:59"
# (this is so that when remote files become > 3 months old, they are not
# suddenly uploaded again).
sub ls2time
{
    local( $month, $date, $timeoryear ) = @_;
    local( $yr, $mo, $hr, $mn );
    local( %month ) = ( 'Jan', 1, 'Feb', 2, 'Mar', 3, 'Apr', 4,
			'May', 5, 'Jun', 6, 'Jul', 7, 'Aug', 8,
			'Sep', 9, 'Oct', 10, 'Nov', 11, 'Dec', 12 );

    $mo = $month{ $month } -1;

    if ( $timeoryear =~ /^(\d+):(\d+)$/ )
    {
	$hr = $1; $mn = $2;
	local($year, $month) = ( gmtime( time ) )[ 5, 4 ];
	$yr = $year;
	if ( $mo > $month && $mo - $month > 6 )
	{
	    $yr--;
	}
	elsif ( $month > $mo && $month - $mo > 6 )
	{
	    $yr++;
	}
    }
    else
    {
	$hr = 23; $mn = 59;
	$yr = $timeoryear - 1900;
    }

    timegm(59,$mn,$hr,$date,$mo,$yr);
}

#   Given the permission field from the output of 'ls -l', return the mode 
# as an octal number.
sub ls2mode
{
    local( $perm ) = @_;
    local( $_, $mode );

    $mode = 0;
    for ( $perm =~ m/(...)(...)(...)$/ )
    {
	$mode <<= 3;
	$mode |= 4 if /r../;
	$mode |= 2 if /.w./;
	$mode |= 1 if /..[stx]/;
    }

    return sprintf( "0%03o", $mode );
}

#   Convert a time given as seconds since the epoch into a short form
# as used in 'ls -l'.  Eg "Jan  1 12:43", or "Aug  1  1996" (for dates
# greater than 3 months ago, or more than 1 month into the future).
sub time2ls
{
    local( $time ) = @_;
    local( $s ) = scalar gmtime( $time );

    if ( $^T - $time < 90 * 24 * 60 * 60
	&& $time - $^T < 30 * 24 * 60 * 60 )
    {
	substr( $s, 4, 12 );
    }
    else
    {
	substr( $s, 4, 7 ).substr( $s, 19, 5 );
    }
}

#   Convert an array of shell-style glob patterns into a regular expression
# Returns undef if the resultant regular expression is not valid.
sub glob2re
{
    local( @pattern ) = @_;
    local( $pattern );

    # Convert elements of glob to regular expression
    for $pattern ( @pattern )
    {
	$pattern =~ s/\./\\./g;
	$pattern =~ s/\+/\\+/g;
	$pattern =~ s/\*/.*/g;
	$pattern =~ s/\?/./g;
    }

    # Join to form single regular expression
    $pattern = '^(' . join( '|', @pattern ) . ')$';

    eval '/$pattern/';			# Test R.E.

    $@ ? undef : $pattern;
}

#   Remove newline from end of text, and return text.
sub nonl
{
    local( $text ) = @_;

    chomp( $text );

    return $text;
}
